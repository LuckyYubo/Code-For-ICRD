import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
import xlrd

class ExcelData():
    def __init__(self,data_path,sheetname):
        self.data_path = data_path
        self.sheetname = sheetname
        self.data = xlrd.open_workbook(self.data_path)
        self.table = self.data.sheet_by_name(self.sheetname)
        self.keys = self.table.row_values(0)
        self.rowNum = self.table.nrows
        self.colNum = self.table.ncols

    def readExcel(self):
        if self.rowNum < 2:
            print("the row number of this sheet less than 2")
        else:
            L = np.zeros(shape=(self.rowNum, self.colNum), dtype=float)
            for i in range(self.rowNum):
                for j in range(self.colNum):
                    L[i,j] = self.table.row_values(i)[j]
        return L

def Fig2():
    font={'weight': 'bold'}
    data_path = "e:/2019ncov/Data/Results.xlsx"
    sheet_name1 = "SEIR"
    sheet_name2 = "Stat_coef"
    get_data1 = ExcelData(data_path, sheet_name1)
    Data1 = get_data1.readExcel()
    get_data2 = ExcelData(data_path, sheet_name2)
    Data2 = get_data2.readExcel()
    y1 = np.arange(0, 5e6, 1e5)
    x1 = np.ones(len(y1)) * 34
    y2 = np.arange(0, 42600, 300)
    x2 = np.ones(len(y2)) * 11

    plt.style.use('seaborn-whitegrid')
    plt.subplot(1,2,1)
    ax1 = plt.plot(Data1[...,0], Data1[...,1], label='Suspectible')
    ax2 = plt.plot(Data1[...,0], Data1[...,2], label='Exposed')
    ax3 = plt.plot(Data1[...,0], Data1[...,3], label='Infected')
    ax4 = plt.plot(Data1[...,0], Data1[...,4], label='Recovered')
    ax10 = plt.plot(x1, y1, linestyle='--', color='tan', linewidth=1.5)
    plt.text(35, 2e6, 'Mar. 3rd', fontsize=12)
    plt.text(60, 1.2e6, 'Mar. 28th', fontsize=12)
    plt.text(80, 3e5, 'Apr. 17th', fontsize=12)
    plt.text(-2, 1.12e7, '(A)', fontdict=font, fontsize=14) 
    plt.xlabel('Days since Jan. 28th', fontsize=12)
    plt.ylabel('Population',fontsize=12)
    plt.setp(ax1, color=sns.xkcd_rgb['gold'], linewidth=1.5)
    plt.setp(ax2, color=sns.xkcd_rgb['denim blue'], linewidth=1.5)
    plt.setp(ax3, color=sns.xkcd_rgb['pale red'], linewidth=1.5)
    plt.setp(ax4, color=sns.xkcd_rgb['medium green'], linewidth=1.5)
    plt.legend(fontsize=12)

    plt.subplot(1,2,2)
    ax5 = plt.plot(Data2[...,0], Data2[...,1], label='Infected')
    ax6 = plt.plot(Data2[...,0], Data2[...,2], label='Confirmed')
    ax7 = plt.plot(Data2[...,0], Data2[...,3], label='Recovered')
    ax8 = plt.plot(Data2[...,0], Data2[...,4], label='Dead')
    ax20 = plt.plot(x2, y2, linestyle='--', color='tan', linewidth=1.5)
    plt.text(15, 41000, 'Feb. 8th', fontsize=12)
    plt.text(40, 2.5e4, 'Mar. 8th', fontsize=12)
    plt.text(60, 1.7e4, 'Mar. 28th', fontsize=12)
    plt.text(80, 1.16e4, 'Apr. 17th', fontsize=12)
    plt.text(100, 8500, 'May. 7th', fontsize=12)
    plt.text(-2, 5.15e4, '(B)', fontdict=font, fontsize=14) 
    plt.xlabel('Days since Jan. 28th',fontsize=12)
    plt.ylabel('Population',fontsize=12)
    plt.setp(ax5, color=sns.xkcd_rgb['pale red'], linewidth=1.3)
    plt.setp(ax6, color=sns.xkcd_rgb['dusty purple'], linewidth=1.3)
    plt.setp(ax7, color=sns.xkcd_rgb['medium green'], linewidth=1.5)
    plt.setp(ax8, color=sns.xkcd_rgb['greyish'], linewidth=1.5)
    plt.legend(fontsize=12)
    ax = plt.gca()
    ax.yaxis.get_major_formatter().set_powerlimits((0, 1))
    plt.show()

def Fig3():
    font={'weight': 'bold'}
    data_path = "e:/2019ncov/Data/Results.xlsx"
    sheet_name1 = "Dyn_coef"
    get_data1 = ExcelData(data_path, sheet_name1)
    data = get_data1.readExcel()
    raw_data_path = "e:/2019ncov/ncovData.xlsx"
    sheet_name2 = "Sheet1"
    getdata2 = ExcelData(raw_data_path,sheet_name2)
    raw_data = getdata2.readExcel()
    t = np.arange(-1, np.size(raw_data, 0)-1)
    y1 = np.arange(0, 5e4, 1000)
    x1 = np.ones(len(y1)) * 17
    y2 = np.arange(0, 5e4, 1000)
    x2 = np.ones(len(y2)) * 55
    y3 = np.arange(1e4, 5.5e4, 1000)
    x3 = np.ones(len(y3)) * 17
    x4 = np.ones(len(y3)) * 55
    y4 = np.arange(1000, 5000, 100)
    x5 = np.ones(len(y4)) * 17
    x6 = np.ones(len(y4)) * 55
    x7 = np.arange(76, 90)
    y7 = np.ones(len(x7)) * 3869

    plt.style.use('seaborn-whitegrid')
    plt.subplot(1,3,1)
    ax1 = plt.plot(data[...,0], data[...,1], label='Infected')
    up1 = data[...,1] * 1.05
    low1 = data[...,1] * 0.95
    plt.fill_between(data[...,0], low1, up1, color='red', alpha=0.3, linewidths=0, interpolate=True)
    ax10 = plt.plot(x1, y1, linestyle='--', color='tan', linewidth=1.5)
    ax2 = plt.plot(data[...,0], data[...,2], label='Confirmed')
    up2 = data[...,2] * 1.05
    low2 = data[...,2] * 0.95
    plt.fill_between(data[...,0], low2, up2, color='mediumpurple', alpha=0.3, linewidths=0, interpolate=True)
    ax20 = plt.plot(x2, y2, linestyle='--', color='tan', linewidth=1.5)
    ax3 = plt.scatter(t, raw_data[..., 0], c='cadetblue', alpha=0.85, linewidths=0, label='Confirmed Sta.')
    plt.text(-6, 48000, 'Phase 1', fontsize=12)
    plt.text(25, 48000, 'Phase 2', fontsize=12)
    plt.text(65, 48000, 'Phase 3', fontsize=12)
    plt.text(95, 5e4, '(A)', fontdict=font, fontsize=14) 
    plt.setp(ax1, color=sns.xkcd_rgb['pale red'], linewidth=2.0)
    plt.setp(ax2, color=sns.xkcd_rgb['dusty purple'], linewidth=2.0)
    plt.xlabel('Days since Jan. 28th',fontsize=12)
    plt.ylabel('Population',fontsize=12)
    plt.legend(loc='center right',fontsize=12)
    ax = plt.gca()
    ax.yaxis.get_major_formatter().set_powerlimits((0, 1))

    plt.subplot(1,3,2)
    # ax4 = plt.plot(data[...,0], data[...,3], label='Recovered')
    ax5 = plt.plot(data[...,0], data[...,5], label='Recovered Hos.')
    up5 = data[...,3] * 1.05
    low5 = data[...,3] * 0.95
    plt.fill_between(data[...,0], low5, up5, color='green', alpha=0.3, linewidths=0, interpolate=True)
    ax6 = plt.scatter(t, raw_data[..., 1], c='cadetblue', alpha=0.85, linewidths=0, label='Recoverd Sta.')
    ax50 = plt.plot(x3, y3, linestyle='--', color='tan', linewidth=1.5)
    ax60 = plt.plot(x4, y3, linestyle='--', color='tan', linewidth=1.5)
    plt.text(-6, 53000, 'Phase 1', fontsize=12)
    plt.text(25, 53000, 'Phase 2', fontsize=12)
    plt.text(65, 53000, 'Phase 3', fontsize=12)
    plt.text(5.5, 20000, 'Feb. 14th', fontsize=10)
    plt.text(43.5, 20000, 'Mar. 23th', fontsize=10)
    plt.text(95, 5.5e4, '(B)', fontdict=font, fontsize=14) 
    # lt.setp(ax4, color=sns.xkcd_rgb['slate green'], linewidth=2.0)
    plt.setp(ax5, color=sns.xkcd_rgb['medium green'], linewidth=2.0)
    plt.xlabel('Days since Jan. 28th',fontsize=12)
    plt.ylabel('Population',fontsize=12)
    plt.legend(loc='lower right', fontsize=12)
    ax = plt.gca()
    ax.yaxis.get_major_formatter().set_powerlimits((0, 1))

    plt.subplot(1,3,3)
    ax7 = plt.plot(data[...,0], data[...,4], label='Total Dead')
    up7 = data[...,4] * 1.05
    low7 = data[...,4] * 0.95
    plt.fill_between(data[...,0], low7, up7, color='tan', alpha=0.3, linewidths=0, interpolate=True)
    ax8 = plt.plot(data[...,0], data[...,6], label='Dead Hos.')
    up8 = data[...,6] * 1.05
    low8 = data[...,6] * 0.95
    plt.fill_between(data[...,0], low8, up8, color='grey', alpha=0.3, linewidths=0, interpolate=True)
    ax9 = plt.scatter(t, raw_data[..., 2], c='cadetblue', alpha=0.85, linewidths=0, label='Dead Sta.')
    ax91 = plt.scatter(x7, y7, c='brown', alpha=0.85, linewidths=0, label='Dead Rev.')
    ax70 = plt.plot(x5, y4, linestyle='--', color='tan', linewidth=1.5)
    ax80 = plt.plot(x6, y4, linestyle='--', color='tan', linewidth=1.5)
    plt.text(-6, 4800, 'Phase 1', fontsize=12)
    plt.text(25, 4800, 'Phase 2', fontsize=12)
    plt.text(65, 4800, 'Phase 3', fontsize=12)
    plt.text(95, 5e3, '(C)', fontdict=font, fontsize=14) 
    plt.setp(ax7, color=sns.xkcd_rgb['tan'], linewidth=2.0)
    plt.setp(ax8, color=sns.xkcd_rgb['greyish'], linewidth=2.0)
    plt.xlabel('Days since Jan. 28th',fontsize=12)
    plt.ylabel('Population',fontsize=12)
    plt.legend(fontsize=12)
    ax = plt.gca()
    ax.yaxis.get_major_formatter().set_powerlimits((0, 1))

    plt.show()

def Fexp(t, a, b, c):
    y = a * np.exp(b * t) + c
    return y

def Farctan(t, a, b, c, d):
    y = a * np.arctan(b * (t - c)) + d
    return y 

def Fig4():
    font={'weight': 'bold'}
    t = np.arange(0, 60, 0.5)
    t2 = np.arange(0, 100, 0.5)

    alpha1 = Fexp(t, 1.6, -0.07, 0.2)
    alpha2 = Fexp(t, 1.6, -0.08, 0.2)
    alpha3 = Fexp(t, 1.6, -0.10, 0.2)
    alpha4 = Fexp(t, 1.6, -0.12, 0.2)
    alpha5 = Fexp(t, 1.6, -0.13, 0.2)
    up1 = alpha1[56:64] * 1.05
    low1 = alpha1[56:64] * 0.95
    up2 = alpha2[48:56] * 1.05
    low2 = alpha2[48:56] * 0.95
    up3 = alpha3[38:43] * 1.05
    low3 = alpha3[38:43] * 0.95
    up4 = alpha4[30:38] * 1.05
    low4 = alpha4[30:38] * 0.95
    up5 = alpha5[28:36] * 1.05
    low5 = alpha5[28:36] * 0.95

    # beta1 = Farctan(t2, 0.2/np.pi, 0.5, 0, 0.9)
    # beta2 = Farctan(t2, 0.2/np.pi, 1, 0, 0.9)
    # beta3 = Farctan(t2, 0.2/np.pi, 2, 0, 0.9)
    # beta4 = Farctan(t2, 0.2/np.pi, 5, 0, 0.9)
    # beta5 = Farctan(t2, 0.2/np.pi, 10, 0, 0.9)
    
    eta1 = Farctan(t2, 1.0/np.pi, 0.03, 0, 0.2)
    eta2 = Farctan(t2, 1.0/np.pi, 0.04, 0, 0.2)
    eta3 = Farctan(t2, 1.0/np.pi, 0.05, 0, 0.2)
    eta4 = Farctan(t2, 1.0/np.pi, 0.07, 0, 0.2)
    eta5 = Farctan(t2, 1.0/np.pi, 0.09, 0, 0.2)
    up6 = eta1[87:95] * 1.02
    low6 = eta1[87:95] * 0.98
    up7 = eta2[65:73] * 1.02
    low7 = eta2[65:73] * 0.98
    up8 = eta3[53:61] * 1.02
    low8 = eta3[53:61] * 0.98
    up9 = eta4[37:45] * 1.02
    low9 = eta4[37:45] * 0.98
    up10 = eta5[27:35] * 1.02
    low10 = eta5[27:35] * 0.98

    plt.style.use('seaborn-whitegrid')
    plt.subplot(1,2,1)
    ax1 = plt.plot(t, alpha1, label='b=0.07: 7 days late')
    plt.setp(ax1, color=sns.xkcd_rgb['dusty purple'], linewidth=2.0)
    ax2 = plt.plot(t, alpha2, label='b=0.08: 4 days late')
    plt.setp(ax2, color=sns.xkcd_rgb['medium green'], linewidth=2.0)
    ax3 = plt.plot(t, alpha3, label='b=0.10: Feb. 17th')
    plt.setp(ax3, color=sns.xkcd_rgb['pale red'], linewidth=2.0)
    ax4 = plt.plot(t, alpha4, label='b=0.12: 2 days early')
    plt.setp(ax4, color=sns.xkcd_rgb['gold'], linewidth=2.0)
    ax5 = plt.plot(t, alpha5, label='b=0.13: 3 days early')
    plt.setp(ax5, color=sns.xkcd_rgb['greyish'], linewidth=2.0)
    plt.fill_between(t[56:64], low1, up1, color='purple', alpha=0.8, linewidths=0, interpolate=True)
    plt.fill_between(t[48:56], low2, up2, color='green', alpha=0.8, linewidths=0, interpolate=True)
    plt.fill_between(t[38:43], low3, up3, color='red', alpha=0.8, linewidths=0, interpolate=True)
    plt.fill_between(t[30:38], low4, up4, color='yellow', alpha=0.8, linewidths=0, interpolate=True)
    plt.fill_between(t[26:34], low5, up5, color='grey', alpha=0.8, linewidths=0, interpolate=True)
    plt.text(10, 1.2, r'$\alpha = 1.6 * e^{-bt} + 0.2, \alpha \in [1.8, 0.2]$', fontsize=12)
    plt.text(32, 0.47, r'$\alpha = 0.4$ is the critical', fontsize=12)
    plt.text(32, 0.4, 'value for isolation', fontsize=12)
    plt.text(-2, 1.82, '(A)', fontdict=font, fontsize=14) 
    plt.xlabel('Days since Jan. 28th',fontsize=12)
    plt.ylabel(r'$\alpha$',fontsize=12)
    plt.legend(fontsize=12)
    ax = plt.gca()
    ax.yaxis.get_major_formatter().set_powerlimits((0, 1))

    # plt.subplot(1,2,2)
    # ax6 = plt.plot(t2, beta1, label='b=0.1: 3 days early')
    # plt.setp(ax6, color=sns.xkcd_rgb['dusty purple'], linewidth=2.0)
    # ax7 = plt.plot(t2, beta2, label='b=0.5: 2 days early')
    # plt.setp(ax7, color=sns.xkcd_rgb['medium green'], linewidth=2.0)
    # ax8 = plt.plot(t2, beta3, label='b=2.0: Jan. 31th')
    # plt.setp(ax8, color=sns.xkcd_rgb['pale red'], linewidth=2.0)
    # ax9 = plt.plot(t2, beta4, label='b=5.0: 2 days late')
    # plt.setp(ax9, color=sns.xkcd_rgb['gold'], linewidth=2.0)
    # ax10 = plt.plot(t2, beta5, label='b=10: 9 days late')
    # plt.setp(ax10, color=sns.xkcd_rgb['greyish'], linewidth=2.0)
    # plt.text(5, 0.94, r'$\beta = \frac{0.2}{\pi} \arctan(bt) + 0.9, \beta \in [0.9, 1]$', fontsize=12)
    # plt.xlabel('Days since Jan. 28th',fontsize=12)
    # plt.ylabel(r'$\beta$',fontsize=12)
    # plt.legend(fontsize=12)
    # ax = plt.gca()
    # ax.yaxis.get_major_formatter().set_powerlimits((0, 1))

    plt.subplot(1,2,2)
    ax6 = plt.plot(t2, eta1, label='v=0.03: 19 days late')
    plt.setp(ax6, color=sns.xkcd_rgb['dusty purple'], linewidth=2.0)
    ax7 = plt.plot(t2, eta2, label='v=0.04: 7 days later')
    plt.setp(ax7, color=sns.xkcd_rgb['medium green'], linewidth=2.0)
    ax8 = plt.plot(t2, eta3, label='v=0.05: Feb. 24th')
    plt.setp(ax8, color=sns.xkcd_rgb['pale red'], linewidth=2.0)
    ax9 = plt.plot(t2, eta4, label='v=0.07: 7 days early')
    plt.setp(ax9, color=sns.xkcd_rgb['gold'], linewidth=2.0)
    ax10 = plt.plot(t2, eta5, label='v=0.09: 12 days early')
    plt.setp(ax10, color=sns.xkcd_rgb['greyish'], linewidth=2.0)
    plt.fill_between(t2[87:95], low6, up6, color='purple', alpha=0.8, linewidths=0, interpolate=True)
    plt.fill_between(t2[65:73], low7, up7, color='green', alpha=0.8, linewidths=0, interpolate=True)
    plt.fill_between(t2[53:61], low8, up8, color='red', alpha=0.8, linewidths=0, interpolate=True)
    plt.fill_between(t2[37:45], low9, up9, color='yellow', alpha=0.8, linewidths=0, interpolate=True)
    plt.fill_between(t2[27:35], low10, up10, color='grey', alpha=0.8, linewidths=0, interpolate=True)
    plt.text(20, 0.32, r'$\eta = \frac{1}{\pi} \arctan(vt) + 0.2, \eta \in [0.2, 0.7]$', fontsize=12)
    plt.text(45, 0.45, r'$\eta = 0.5$ is the critical value', fontsize=12) 
    plt.text(45, 0.43, 'for invertigation', fontsize=12) 
    plt.text(-2, 0.665, '(B)', fontdict=font, fontsize=14) 
    plt.xlabel('Days since Jan. 28th',fontsize=12)
    plt.ylabel(r'$\eta$',fontsize=12)
    plt.legend(fontsize=12)

    plt.show()

def Fig5():
    data_path = "e:/2019ncov/Data/Results.xlsx"
    sheet_name1 = "Alpha"
    get_data1 = ExcelData(data_path, sheet_name1)
    data1 = get_data1.readExcel()
    sheet_name2 = "Eta"
    get_data2 = ExcelData(data_path, sheet_name2)
    data2 = get_data2.readExcel()
    font={'weight': 'bold'}

    plt.style.use('seaborn-whitegrid')
    plt.subplot(2,2,1)
    ax1 = plt.plot(data1[0:89,0], data1[0:89,1], label=r'$\beta_1$: 7 days late')
    plt.setp(ax1, color=sns.xkcd_rgb['dusty purple'], linewidth=2.0)
    ax2 = plt.plot(data1[...,7], data1[...,8], label=r'$\beta_2$: 4 days late')
    plt.setp(ax2, color=sns.xkcd_rgb['medium green'], linewidth=2.0)
    ax3 = plt.plot(data1[...,14], data1[...,15], label=r'$\beta_3$: Feb. 17th')
    plt.setp(ax3, color=sns.xkcd_rgb['pale red'], linewidth=2.0)
    ax4 = plt.plot(data1[...,21], data1[...,22], label=r'$\beta_4$: 2 days early')
    plt.setp(ax4, color=sns.xkcd_rgb['gold'], linewidth=2.0)
    ax5 = plt.plot(data1[...,28], data1[...,29], label=r'$\beta_5$: 3 days early')
    plt.setp(ax5, color=sns.xkcd_rgb['greyish'], linewidth=2.0)
    plt.text(-2, 8e4, '(A)', fontdict=font, fontsize=14)
    plt.text(80, 4000, 'Infected', fontsize=18)  
    plt.xlabel('Days since Jan. 28th',fontsize=12)
    plt.ylabel('Population',fontsize=12)
    plt.legend(fontsize=12)
    axa = plt.gca()
    axa.yaxis.get_major_formatter().set_powerlimits((0, 1))

    plt.subplot(2,2,2)
    ax6 = plt.plot(data1[0:89,0], data1[0:89,4], label=r'$\beta_1$: 7 days late')
    plt.setp(ax6, color=sns.xkcd_rgb['dusty purple'], linewidth=2.0)
    ax7 = plt.plot(data1[...,7], data1[...,11], label=r'$\beta_2$: 4 days late')
    plt.setp(ax7, color=sns.xkcd_rgb['medium green'], linewidth=2.0)
    ax8 = plt.plot(data1[...,14], data1[...,18], label=r'$\beta_3$: Feb. 24th')
    plt.setp(ax8, color=sns.xkcd_rgb['pale red'], linewidth=2.0)
    ax9 = plt.plot(data1[...,21], data1[...,25], label=r'$\beta_4$: 2 days early')
    plt.setp(ax9, color=sns.xkcd_rgb['gold'], linewidth=2.0)
    ax10 = plt.plot(data1[...,28], data1[...,32], label=r'$\beta_5$: 3 days early')
    plt.quiver(45, 3850, 0, 10, color='purple', width=0.005, scale=50)
    plt.text(46, 4700, '+3019', fontsize=12) 
    plt.quiver(60, 3850, 0, 5.9, color='green', width=0.005, scale=50)
    plt.text(61, 3900, '+1689', fontsize=12) 
    plt.quiver(76, 3700, 0, -3.5, color='gold', width=0.005, scale=50)
    plt.text(68, 3200, '-974', fontsize=12) 
    plt.quiver(96, 3700, 0, -4.5, color='grey', width=0.005, scale=50)
    plt.text(85, 3200, '-1309', fontsize=12) 
    plt.text(-2, 6400, '(B)', fontdict=font, fontsize=14) 
    plt.text(80, 300, 'Dead', fontsize=18)  
    plt.setp(ax10, color=sns.xkcd_rgb['greyish'], linewidth=2.0)
    plt.xlabel('Days since Jan. 28th',fontsize=12)
    plt.ylabel('Population',fontsize=12)
    # plt.legend(bbox_to_anchor=(1.05, 0.5), fontsize=12)
    axb = plt.gca()
    axb.yaxis.get_major_formatter().set_powerlimits((0, 1))

    plt.subplot(2,2,3)
    axc1 = plt.plot(data2[0:89,0], data2[0:89,1], label=r'$\eta_1$: 19 days late')
    plt.setp(axc1, color=sns.xkcd_rgb['dusty purple'], linewidth=2.0)
    axc2 = plt.plot(data2[0:89,7], data2[0:89,8], label=r'$\eta_2$: 7 days late')
    plt.setp(axc2, color=sns.xkcd_rgb['medium green'], linewidth=2.0)
    axc3 = plt.plot(data2[...,14], data2[...,15], label=r'$\eta_3$: Feb. 17th')
    plt.setp(axc3, color=sns.xkcd_rgb['pale red'], linewidth=2.0)
    axc4 = plt.plot(data2[...,21], data2[...,22], label=r'$\eta_4$: 7 days early')
    plt.setp(axc4, color=sns.xkcd_rgb['gold'], linewidth=2.0)
    axc5 = plt.plot(data2[...,28], data2[...,29], label=r'$\eta_5$: 12 days early')
    plt.setp(axc5, color=sns.xkcd_rgb['greyish'], linewidth=2.0)
    plt.text(-2, 5.4e4, '(C)', fontdict=font, fontsize=14)
    plt.text(80, 2200, 'Infected', fontsize=18)   
    plt.xlabel('Days since Jan. 28th',fontsize=12)
    plt.ylabel('Population',fontsize=12)
    plt.legend(fontsize=12)
    axc = plt.gca()
    axc.yaxis.get_major_formatter().set_powerlimits((0, 1))

    plt.subplot(2,2,4)
    axd1 = plt.plot(data2[0:89,0], data2[0:89,4], label= r'$\eta_1$: 19 days late')
    plt.setp(axd1, color=sns.xkcd_rgb['dusty purple'], linewidth=2.0)
    axd2 = plt.plot(data2[0:89,7], data2[0:89,11], label=r'$\eta_2$: 7 days late')
    plt.setp(axd2, color=sns.xkcd_rgb['medium green'], linewidth=2.0)
    axd3 = plt.plot(data2[...,14], data2[...,18], label=r'$\eta_3$: Feb. 24th')
    plt.setp(axd3, color=sns.xkcd_rgb['pale red'], linewidth=2.0)
    axd4 = plt.plot(data2[...,21], data2[...,25], label=r'$\eta_4$: 7 days early')
    plt.setp(axd4, color=sns.xkcd_rgb['gold'], linewidth=2.0)
    axd5 = plt.plot(data2[...,28], data2[...,32], label=r'$\eta_5$: 12 days early')
    plt.setp(axd5, color=sns.xkcd_rgb['greyish'], linewidth=2.0)
    plt.quiver(45, 3800, 0, 5, color='purple', width=0.005, scale=50)
    plt.text(46, 4500, '+828', fontsize=12) 
    plt.quiver(60, 3800, 0, 1.5, color='green', width=0.005, scale=50)
    plt.text(61, 4100, '+561', fontsize=12) 
    plt.quiver(76, 3750, 0, -2.5, color='gold', width=0.005, scale=50)
    plt.text(68, 3300, '-661', fontsize=12) 
    plt.quiver(96, 3750, 0, -4.5, color='grey', width=0.005, scale=50)
    plt.text(87, 2900, '-940', fontsize=12) 
    plt.text(-2, 4600, '(D)', fontdict=font, fontsize=14) 
    plt.text(80, 200, 'Dead', fontsize=18)  
    plt.xlabel('Days since Jan. 28th',fontsize=12)
    plt.ylabel('Population',fontsize=12)
    # plt.legend(bbox_to_anchor=(1.05, 0.5), fontsize=12)
    axd = plt.gca()
    axd.yaxis.get_major_formatter().set_powerlimits((0, 1))

    plt.show()

def FigS1():
    # the fugure for gamma 
    plt.style.use('seaborn-whitegrid')
    In = np.arange(0,1.0,0.01)
    b1 = (1 - np.power(In, 1))
    b2 = (1 - np.power(In, 0.2))
    b3 = (1 - np.power(In, 0.1))
    b4 = (1 - np.power(In, 0.05))
    b5 = (1 - np.power(In, 0.01))
    axd1 = plt.plot(In, b1, label=r'$\gamma = 1$')
    plt.setp(axd1, color=sns.xkcd_rgb['dusty purple'], linewidth=1.5)
    axd2 = plt.plot(In, b2, label=r'$\gamma = 5$')
    plt.setp(axd2, color=sns.xkcd_rgb['medium green'], linewidth=1.5)
    axd3 = plt.plot(In, b3, label=r'$\gamma = 10$')
    plt.setp(axd3, color=sns.xkcd_rgb['pale red'], linewidth=1.5)
    axd4 = plt.plot(In, b4, label=r'$\gamma = 15$')
    plt.setp(axd4, color=sns.xkcd_rgb['gold'], linewidth=1.5)
    axd5 = plt.plot(In, b5, label=r'$\gamma = 20$')
    plt.setp(axd5, color=sns.xkcd_rgb['greyish'], linewidth=1.5)
    plt.xlabel(r'$I / N$',fontsize=12)
    plt.ylabel('Harmoniccoefficient',fontsize=12)
    plt.legend(fontsize=12)
    plt.show()

def FigS2():
    # the figure for the change of the intensity of the isolation and
    # invertigation policies
     
    font={'weight': 'bold'}
    t = np.arange(0, 60, 0.5)
    t2 = np.arange(0, 100, 0.5)
    data_path = "e:/2019ncov/Data/Results.xlsx"
    sheet_name1 = "Alpha_c"
    get_data1 = ExcelData(data_path, sheet_name1)
    data1 = get_data1.readExcel()
    sheet_name2 = "Eta_w"
    get_data2 = ExcelData(data_path, sheet_name2)
    data2 = get_data2.readExcel()

    alpha1 = Fexp(t, 1.6, -0.10, 0.10)
    alpha2 = Fexp(t, 1.6, -0.10, 0.15)
    alpha3 = Fexp(t, 1.6, -0.10, 0.20)
    alpha4 = Fexp(t, 1.6, -0.10, 0.25)
    alpha5 = Fexp(t, 1.6, -0.10, 0.30)

    eta1 = Farctan(t2, 1.0/np.pi, 0.05, 0, 0.15)
    eta2 = Farctan(t2, 1.0/np.pi, 0.05, 0, 0.17)
    eta3 = Farctan(t2, 1.0/np.pi, 0.05, 0, 0.20)
    eta4 = Farctan(t2, 1.0/np.pi, 0.05, 0, 0.23)
    eta5 = Farctan(t2, 1.0/np.pi, 0.05, 0, 0.25)

    plt.style.use('seaborn-whitegrid')
    plt.subplot(2,3,1)
    ax1 = plt.plot(t, alpha1, label='c=0.10')
    plt.setp(ax1, color=sns.xkcd_rgb['dusty purple'], linewidth=2.0)
    ax2 = plt.plot(t, alpha2, label='c=0.15')
    plt.setp(ax2, color=sns.xkcd_rgb['medium green'], linewidth=2.0)
    ax3 = plt.plot(t, alpha3, label='c=0.20')
    plt.setp(ax3, color=sns.xkcd_rgb['pale red'], linewidth=2.0)
    ax4 = plt.plot(t, alpha4, label='c=0.25')
    plt.setp(ax4, color=sns.xkcd_rgb['gold'], linewidth=2.0)
    ax5 = plt.plot(t, alpha5, label='c=0.30')
    plt.setp(ax5, color=sns.xkcd_rgb['greyish'], linewidth=2.0)
    plt.text(1.83, 1.8, '(A)', fontdict=font, fontsize=14)
    plt.text(20, 0.75, r'$\alpha = 1.6 * e^{-0.1t} + c$', fontsize=12) 
    # plt.text(80, 200, 'Dead', fontsize=18)  
    plt.xlabel('Days since Jan. 28th',fontsize=12)
    plt.ylabel(r'$\alpha$',fontsize=12)
    plt.legend(fontsize=12)

    plt.subplot(2,3,2)
    ax21 = plt.plot(data1[...,0], data1[...,1], label=r'$\alpha \in [1.70, 0.10]$')
    plt.setp(ax21, color=sns.xkcd_rgb['dusty purple'], linewidth=2.0)
    ax22 = plt.plot(data1[...,7], data1[...,8], label=r'$\alpha \in [1.75, 0.15]$')
    plt.setp(ax22, color=sns.xkcd_rgb['medium green'], linewidth=2.0)
    ax23 = plt.plot(data1[...,14], data1[...,15], label=r'$\alpha \in [1.80, 0.20]$')
    plt.setp(ax23, color=sns.xkcd_rgb['pale red'], linewidth=2.0)
    ax24 = plt.plot(data1[0:88,21], data1[0:88,22], label=r'$\alpha \in [1.85, 0.25]$')
    plt.setp(ax24, color=sns.xkcd_rgb['gold'], linewidth=2.0)
    ax25 = plt.plot(data1[0:88,28], data1[0:88,29], label=r'$\alpha \in [1.90, 0.30]$')
    plt.setp(ax25, color=sns.xkcd_rgb['greyish'], linewidth=2.0)
    plt.text(1.5, 6.1e4, '(B)', fontdict=font, fontsize=14)
    plt.text(70, 3000, 'Infected', fontsize=18)  
    plt.xlabel('Days since Jan. 28th',fontsize=12)
    plt.ylabel('Population',fontsize=12)
    plt.legend(fontsize=12)
    axa = plt.gca()
    axa.yaxis.get_major_formatter().set_powerlimits((0, 1))

    plt.subplot(2,3,3)
    ax31 = plt.plot(data1[...,0], data1[...,4], label=r'$\alpha \in [1.70, 0.10]$: c=0.10')
    plt.setp(ax31, color=sns.xkcd_rgb['dusty purple'], linewidth=2.0)
    ax32 = plt.plot(data1[...,7], data1[...,11], label=r'$\alpha \in [1.75, 0.15] $: c=0.15')
    plt.setp(ax32, color=sns.xkcd_rgb['medium green'], linewidth=2.0)
    ax33 = plt.plot(data1[...,14], data1[...,18], label=r'$\alpha \in [1.80, 0.20]$: c=0.20')
    plt.setp(ax33, color=sns.xkcd_rgb['pale red'], linewidth=2.0)
    ax34 = plt.plot(data1[0:88,21], data1[0:88,25], label=r'$\alpha \in [1.85, 0.25]$: c=0.25')
    plt.setp(ax34, color=sns.xkcd_rgb['gold'], linewidth=2.0)
    ax35 = plt.plot(data1[0:88,28], data1[0:88,32], label=r'$\alpha \in [1.90, 0.30]$: c=0.30')
    plt.setp(ax35, color=sns.xkcd_rgb['greyish'], linewidth=2.0)
    plt.text(2, 5200, '(C)', fontdict=font, fontsize=14)
    plt.text(80, 200, 'Dead', fontsize=18)  
    plt.xlabel('Days since Jan. 28th',fontsize=12)
    plt.ylabel('Population',fontsize=12)
    # plt.legend(fontsize=12)
    axa = plt.gca()
    axa.yaxis.get_major_formatter().set_powerlimits((0, 1))

    plt.subplot(2,3,4)
    ax6 = plt.plot(t2, eta1, label='w=0.15')
    plt.setp(ax6, color=sns.xkcd_rgb['dusty purple'], linewidth=2.0)
    ax7 = plt.plot(t2, eta2, label='w=0.17')
    plt.setp(ax7, color=sns.xkcd_rgb['medium green'], linewidth=2.0)
    ax8 = plt.plot(t2, eta3, label='w=0.20')
    plt.setp(ax8, color=sns.xkcd_rgb['pale red'], linewidth=2.0)
    ax9 = plt.plot(t2, eta4, label='w=0.23')
    plt.setp(ax9, color=sns.xkcd_rgb['gold'], linewidth=2.0)
    ax10 = plt.plot(t2, eta5, label='w=0.25')
    plt.setp(ax10, color=sns.xkcd_rgb['greyish'], linewidth=2.0)
    plt.text(1, 0.67, '(D)', fontdict=font, fontsize=14) 
    plt.text(40, 0.45, r'$\eta = \frac{1}{\pi} \arctan(0.05t) + w$', fontsize=12)
    # plt.text(80, 200, 'Dead', fontsize=18)  
    plt.xlabel('Days since Jan. 28th',fontsize=12)
    plt.ylabel(r'$\eta$',fontsize=12)
    plt.legend(fontsize=12)

    plt.subplot(2,3,5)
    ax51 = plt.plot(data2[0:92,0], data2[0:92,1], label=r'$\eta \in [0.15, 0.65]$')
    plt.setp(ax51, color=sns.xkcd_rgb['dusty purple'], linewidth=2.0)
    ax52 = plt.plot(data2[0:88,7], data2[0:88,8], label=r'$\eta \in [0.17, 0.67]$')
    plt.setp(ax52, color=sns.xkcd_rgb['medium green'], linewidth=2.0)
    ax53 = plt.plot(data2[0:92,14], data2[0:92,15], label=r'$\eta \in [0.20, 0.70]$')
    plt.setp(ax53, color=sns.xkcd_rgb['pale red'], linewidth=2.0)
    ax54 = plt.plot(data2[0:92,21], data2[0:92,22], label=r'$\eta \in [0.23, 0.73]$')
    plt.setp(ax54, color=sns.xkcd_rgb['gold'], linewidth=2.0)
    ax55 = plt.plot(data2[...,28], data2[...,29], label=r'$\eta \in [0.25, 0.75]$')
    plt.setp(ax55, color=sns.xkcd_rgb['greyish'], linewidth=2.0)
    plt.text(1, 5.8e4, '(E)', fontdict=font, fontsize=14)
    plt.text(70, 3000, 'Infected', fontsize=18)  
    plt.xlabel('Days since Jan. 28th',fontsize=12)
    plt.ylabel('Population',fontsize=12)
    plt.legend(fontsize=12)
    axa = plt.gca()
    axa.yaxis.get_major_formatter().set_powerlimits((0, 1))

    plt.subplot(2,3,6)
    ax61 = plt.plot(data2[0:92,0], data2[0:92,4], label=r'$\eta$: w=0.15')
    plt.setp(ax61, color=sns.xkcd_rgb['dusty purple'], linewidth=2.0)
    ax62 = plt.plot(data2[0:88,7], data2[0:88,11], label=r'$\eta$: w=0.17')
    plt.setp(ax62, color=sns.xkcd_rgb['medium green'], linewidth=2.0)
    ax63 = plt.plot(data2[0:92,14], data2[0:92,18], label=r'$\eta$: w=0.20')
    plt.setp(ax63, color=sns.xkcd_rgb['pale red'], linewidth=2.0)
    ax64 = plt.plot(data2[0:92,21], data2[0:92,25], label=r'$\eta$: w=0.23')
    plt.setp(ax64, color=sns.xkcd_rgb['gold'], linewidth=2.0)
    ax65 = plt.plot(data2[...,28], data2[...,32], label=r'$\eta$: w=0.23')
    plt.setp(ax65, color=sns.xkcd_rgb['greyish'], linewidth=2.0)
    plt.text(2, 4900, '(F)', fontdict=font, fontsize=14)
    plt.text(80, 200, 'Dead', fontsize=18)  
    plt.xlabel('Days since Jan. 28th',fontsize=12)
    plt.ylabel('Population',fontsize=12)
    # plt.legend(fontsize=12)
    axa = plt.gca()
    axa.yaxis.get_major_formatter().set_powerlimits((0, 1))

    plt.show()

def FigS3():
    # Beta
    font={'weight': 'bold'}
    data_path = "e:/2019ncov/Data/Results.xlsx"
    sheet_name1 = "Beta_t"
    get_data1 = ExcelData(data_path, sheet_name1)
    data1 = get_data1.readExcel()
    sheet_name2 = "Beta_i"
    get_data2 = ExcelData(data_path, sheet_name2)
    data2 = get_data2.readExcel()

    t = np.arange(0, 30, 0.5)
    t1 = np.arange(0, 15, 0.1)
    beta1 = Farctan(t, 0.2/np.pi, 0.5, 0, 0.9)
    beta2 = Farctan(t, 0.2/np.pi, 1, 0, 0.9)
    beta3 = Farctan(t, 0.2/np.pi, 2, 0, 0.9)
    beta4 = Farctan(t, 0.2/np.pi, 3, 0, 0.9)
    beta5 = Farctan(t, 0.2/np.pi, 5, 0, 0.9)

    beta6 = Farctan(t1, 0.4/np.pi, 2, 0, 0.8)
    beta7 = Farctan(t1, 0.3/np.pi, 2, 0, 0.85)
    beta8 = Farctan(t1, 0.2/np.pi, 2, 0, 0.9)
    beta9 = Farctan(t1, 0.1/np.pi, 2, 0, 0.95)
    beta10 = Farctan(t1, 0/np.pi, 2, 0, 1)

    plt.style.use('seaborn-whitegrid')
    plt.subplot(2,3,1)
    ax1 = plt.plot(t, beta1, label='b=0.5')
    plt.setp(ax1, color=sns.xkcd_rgb['dusty purple'], linewidth=2.0)
    ax2 = plt.plot(t, beta2, label='b=1.0')
    plt.setp(ax2, color=sns.xkcd_rgb['medium green'], linewidth=2.0)
    ax3 = plt.plot(t, beta3, label='b=2.0')
    plt.setp(ax3, color=sns.xkcd_rgb['pale red'], linewidth=2.0)
    ax4 = plt.plot(t, beta4, label='b=3.0')
    plt.setp(ax4, color=sns.xkcd_rgb['gold'], linewidth=2.0)
    ax5 = plt.plot(t, beta5, label='b=5.0')
    plt.setp(ax5, color=sns.xkcd_rgb['greyish'], linewidth=2.0)
    plt.text(-1, 0.996, '(A)', fontdict=font, fontsize=14)
    plt.text(5, 0.96, r'$\beta = \frac{0.2}{\pi} \arctan(bt) + 0.9$', fontsize=12) 
    plt.xlabel('Days since Jan. 28th',fontsize=12)
    plt.ylabel(r'$\beta$',fontsize=12)
    plt.legend(fontsize=12)

    plt.subplot(2,3,2)
    ax21 = plt.plot(data1[...,0], data1[...,1], label=r'$\beta$: b=0.5')
    plt.setp(ax21, color=sns.xkcd_rgb['dusty purple'], linewidth=2.0)
    ax22 = plt.plot(data1[...,7], data1[...,8], label=r'$\beta$: b=1.0')
    plt.setp(ax22, color=sns.xkcd_rgb['medium green'], linewidth=2.0)
    ax23 = plt.plot(data1[0:92,14], data1[0:92,15], label=r'$\beta$: b=2.0')
    plt.setp(ax23, color=sns.xkcd_rgb['pale red'], linewidth=2.0)
    ax24 = plt.plot(data1[...,21], data1[...,22], label=r'$\beta$: b=3.0')
    plt.setp(ax24, color=sns.xkcd_rgb['gold'], linewidth=2.0)
    ax25 = plt.plot(data1[...,28], data1[...,29], label=r'$\beta$: b=5.0')
    plt.setp(ax25, color=sns.xkcd_rgb['greyish'], linewidth=2.0)
    plt.text(-2, 4.7e4, '(B)', fontdict=font, fontsize=14)
    plt.text(70, 3000, 'Infected', fontsize=18)  
    plt.xlabel('Days since Jan. 28th',fontsize=12)
    plt.ylabel('Population',fontsize=12)
    plt.legend(fontsize=12)
    axa = plt.gca()
    axa.yaxis.get_major_formatter().set_powerlimits((0, 1))

    plt.subplot(2,3,3)
    ax31 = plt.plot(data1[...,0], data1[...,4], label=r'$\beta$: c=0.5')
    plt.setp(ax31, color=sns.xkcd_rgb['dusty purple'], linewidth=2.0)
    ax32 = plt.plot(data1[...,7], data1[...,11], label=r'$\beta$: c=1.0')
    plt.setp(ax32, color=sns.xkcd_rgb['medium green'], linewidth=2.0)
    ax33 = plt.plot(data1[0:92,14], data1[0:92,18], label=r'$\beta$: c=2.0')
    plt.setp(ax33, color=sns.xkcd_rgb['pale red'], linewidth=2.0)
    ax34 = plt.plot(data1[...,21], data1[...,25], label=r'$\beta$: c=3.0')
    plt.setp(ax34, color=sns.xkcd_rgb['gold'], linewidth=2.0)
    ax35 = plt.plot(data1[...,28], data1[...,32], label=r'$\beta$: c=5.0')
    plt.setp(ax35, color=sns.xkcd_rgb['greyish'], linewidth=2.0)
    plt.text(-2, 4200, '(C)', fontdict=font, fontsize=14)
    plt.text(80, 200, 'Dead', fontsize=18)  
    plt.xlabel('Days since Jan. 28th',fontsize=12)
    plt.ylabel('Population',fontsize=12)
    # plt.legend(fontsize=12)
    axa = plt.gca()
    axa.yaxis.get_major_formatter().set_powerlimits((0, 1))

    plt.subplot(2,3,4)
    ax6 = plt.plot(t1, beta6, label=r'$\beta \in [0.80, 1.0]$')
    plt.setp(ax6, color=sns.xkcd_rgb['dusty purple'], linewidth=2.0)
    ax7 = plt.plot(t1, beta7, label=r'$\beta \in [0.85, 1.0]$')
    plt.setp(ax7, color=sns.xkcd_rgb['medium green'], linewidth=2.0)
    ax8 = plt.plot(t1, beta8, label=r'$\beta \in [0.90, 1.0]$')
    plt.setp(ax8, color=sns.xkcd_rgb['pale red'], linewidth=2.0)
    ax9 = plt.plot(t1, beta9, label=r'$\beta \in [0.95, 1.0]$')
    plt.setp(ax9, color=sns.xkcd_rgb['gold'], linewidth=2.0)
    ax10 = plt.plot(t1, beta10, label=r'$\beta \in [1.0, 1.0]$')
    plt.setp(ax10, color=sns.xkcd_rgb['greyish'], linewidth=2.0)
    plt.text(-0.4, 0.99, '(D)', fontdict=font, fontsize=14) 
    plt.text(2.5, 0.93, r'$\beta = \frac{a}{\pi} \arctan(2t) + c$', fontsize=12) 
    plt.xlabel('Days since Jan. 28th',fontsize=12)
    plt.ylabel(r'$\beta$',fontsize=12)
    plt.legend(fontsize=12)

    plt.subplot(2,3,5)
    ax51 = plt.plot(data2[...,0], data2[...,1], label=r'$\beta \in [0.80, 1.0]$')
    plt.setp(ax51, color=sns.xkcd_rgb['dusty purple'], linewidth=2.0)
    ax52 = plt.plot(data2[...,7], data2[...,8], label=r'$\beta \in [0.85, 1.0]$')
    plt.setp(ax52, color=sns.xkcd_rgb['medium green'], linewidth=2.0)
    ax53 = plt.plot(data2[...,14], data2[...,15], label=r'$\beta \in [0.90, 1.0]$')
    plt.setp(ax53, color=sns.xkcd_rgb['pale red'], linewidth=2.0)
    ax54 = plt.plot(data2[...,21], data2[...,22], label=r'$\beta \in [0.95, 1.0]$')
    plt.setp(ax54, color=sns.xkcd_rgb['gold'], linewidth=2.0)
    ax55 = plt.plot(data2[...,28], data2[...,29], label=r'$\beta \in [1.00, 1.0]$')
    plt.setp(ax55, color=sns.xkcd_rgb['greyish'], linewidth=2.0)
    plt.text(-2, 4.7e4, '(E)', fontdict=font, fontsize=14)
    plt.text(70, 3000, 'Infected', fontsize=18)  
    plt.xlabel('Days since Jan. 28th',fontsize=12)
    plt.ylabel('Population',fontsize=12)
    plt.legend(fontsize=12)
    axa = plt.gca()
    axa.yaxis.get_major_formatter().set_powerlimits((0, 1))

    plt.subplot(2,3,6)
    ax61 = plt.plot(data2[0:92,0], data2[0:92,4], label=r'$\beta \in [0.80, 1.0]$')
    plt.setp(ax61, color=sns.xkcd_rgb['dusty purple'], linewidth=2.0)
    ax62 = plt.plot(data2[0:88,7], data2[0:88,11], label=r'$\beta \in [0.85, 1.0]$')
    plt.setp(ax62, color=sns.xkcd_rgb['medium green'], linewidth=2.0)
    ax63 = plt.plot(data2[0:92,14], data2[0:92,18], label=r'$\beta \in [0.90, 1.0]$')
    plt.setp(ax63, color=sns.xkcd_rgb['pale red'], linewidth=2.0)
    ax64 = plt.plot(data2[0:92,21], data2[0:92,25], label=r'$\beta \in [0.95, 1.0]$')
    plt.setp(ax64, color=sns.xkcd_rgb['gold'], linewidth=2.0)
    ax65 = plt.plot(data2[...,28], data2[...,32], label=r'$\beta \in [1.00, 1.0]$')
    plt.setp(ax65, color=sns.xkcd_rgb['greyish'], linewidth=2.0)
    plt.text(-2, 4200, '(F)', fontdict=font, fontsize=14)
    plt.text(80, 200, 'Dead', fontsize=18)  
    plt.xlabel('Days since Jan. 28th',fontsize=12)
    plt.ylabel('Population',fontsize=12)
    # plt.legend(fontsize=12)
    axa = plt.gca()
    axa.yaxis.get_major_formatter().set_powerlimits((0, 1))

    plt.show()

def FigS4():
    # sigam and kappa
    font={'weight': 'bold'}
    data_path = "e:/2019ncov/Data/Results.xlsx"
    sheet_name1 = "Sigma"
    get_data1 = ExcelData(data_path, sheet_name1)
    data1 = get_data1.readExcel()
    sheet_name2 = "Kappa"
    get_data2 = ExcelData(data_path, sheet_name2)
    data2 = get_data2.readExcel()

    t = np.arange(0, 100, 0.5)
    sigma1 = Farctan(t, 0.05, 0.0427, -44.79, 0.09663)
    sigma2 = Farctan(t, 0.07, 0.0427, -44.79, 0.09663)
    sigma3 = Farctan(t, 0.08638, 0.0427, -44.79, 0.09663)
    sigma4 = Farctan(t, 0.10, 0.0427, -44.79, 0.09663)
    sigma5 = Farctan(t, 0.12, 0.0427, -44.79, 0.09663)

    kappa1 = Fexp(t, 0.005, -0.06919, 0)
    kappa2 = Fexp(t, 0.008, -0.06919, 0)
    kappa3 = Fexp(t, 0.01166, -0.06919, 0)
    kappa4 = Fexp(t, 0.014, -0.06919, 0)
    kappa5 = Fexp(t, 0.017, -0.06919, 0)

    plt.style.use('seaborn-whitegrid')
    plt.subplot(2,3,1)
    ax1 = plt.plot(t, sigma1, label='a=0.05')
    plt.setp(ax1, color=sns.xkcd_rgb['dusty purple'], linewidth=2.0)
    ax2 = plt.plot(t, sigma2, label='a=0.07')
    plt.setp(ax2, color=sns.xkcd_rgb['medium green'], linewidth=2.0)
    ax3 = plt.plot(t, sigma3, label='a=0.08638')
    plt.setp(ax3, color=sns.xkcd_rgb['pale red'], linewidth=2.0)
    ax4 = plt.plot(t, sigma4, label='a=0.10')
    plt.setp(ax4, color=sns.xkcd_rgb['gold'], linewidth=2.0)
    ax5 = plt.plot(t, sigma5, label='a=0.12')
    plt.setp(ax5, color=sns.xkcd_rgb['greyish'], linewidth=2.0)
    plt.text(-2, 0.28, '(A)', fontdict=font, fontsize=14)
    plt.text(10, 0.28, r'$\sigma = a * \arctan(0.04(t-45)) + 0.1$', fontsize=12) 
    plt.ylim(0, 0.31) 
    plt.xlabel('Days since Jan. 28th',fontsize=12)
    plt.ylabel(r'$\sigma$',fontsize=12)
    plt.legend(fontsize=12)

    plt.subplot(2,3,2)
    ax21 = plt.plot(data1[0:88,0], data1[0:88,1], label=r'$\sigma$: a=0.05')
    plt.setp(ax21, color=sns.xkcd_rgb['dusty purple'], linewidth=2.0)
    ax22 = plt.plot(data1[0:92,7], data1[0:92,8], label=r'$\sigma$: a=0.07')
    plt.setp(ax22, color=sns.xkcd_rgb['medium green'], linewidth=2.0)
    ax23 = plt.plot(data1[0:92,14], data1[0:92,15], label=r'$\sigma$: a=0.08638')
    plt.setp(ax23, color=sns.xkcd_rgb['pale red'], linewidth=2.0)
    ax24 = plt.plot(data1[0:96,21], data1[0:96,22], label=r'$\sigma$: a=0.10')
    plt.setp(ax24, color=sns.xkcd_rgb['gold'], linewidth=2.0)
    ax25 = plt.plot(data1[...,28], data1[...,29], label=r'$\sigma$: a=0.12')
    plt.setp(ax25, color=sns.xkcd_rgb['greyish'], linewidth=2.0)
    plt.text(-2, 5e4, '(B)', fontdict=font, fontsize=14)
    plt.text(70, 3000, 'Infected', fontsize=18)  
    plt.xlabel('Days since Jan. 28th',fontsize=12)
    plt.ylabel('Population',fontsize=12)
    plt.legend(fontsize=12)
    axa = plt.gca()
    axa.yaxis.get_major_formatter().set_powerlimits((0, 1))

    plt.subplot(2,3,3)
    ax31 = plt.plot(data1[0:88,0], data1[0:88,4], label=r'$\sigma$: a=0.05')
    plt.setp(ax31, color=sns.xkcd_rgb['dusty purple'], linewidth=2.0)
    ax32 = plt.plot(data1[0:92,7], data1[0:92,11], label=r'$\sigma$: a=0.07')
    plt.setp(ax32, color=sns.xkcd_rgb['medium green'], linewidth=2.0)
    ax33 = plt.plot(data1[0:92,14], data1[0:92,18], label=r'$\sigma$: a=0.08638')
    plt.setp(ax33, color=sns.xkcd_rgb['pale red'], linewidth=2.0)
    ax34 = plt.plot(data1[0:96,21], data1[0:96,25], label=r'$\sigma$: a=0.10')
    plt.setp(ax34, color=sns.xkcd_rgb['gold'], linewidth=2.0)
    ax35 = plt.plot(data1[...,28], data1[...,32], label=r'$\sigma$: a=0.12')
    plt.setp(ax35, color=sns.xkcd_rgb['greyish'], linewidth=2.0)
    plt.text(-2, 4400, '(C)', fontdict=font, fontsize=14)
    plt.text(80, 200, 'Dead', fontsize=18)  
    plt.xlabel('Days since Jan. 28th',fontsize=12)
    plt.ylabel('Population',fontsize=12)
    # plt.legend(fontsize=12)
    axa = plt.gca()
    axa.yaxis.get_major_formatter().set_powerlimits((0, 1))

    plt.subplot(2,3,4)
    ax6 = plt.plot(t, kappa1, label='a=0.005')
    plt.setp(ax6, color=sns.xkcd_rgb['dusty purple'], linewidth=2.0)
    ax7 = plt.plot(t, kappa2, label='a=0.008')
    plt.setp(ax7, color=sns.xkcd_rgb['medium green'], linewidth=2.0)
    ax8 = plt.plot(t, kappa3, label='a=0.01166')
    plt.setp(ax8, color=sns.xkcd_rgb['pale red'], linewidth=2.0)
    ax9 = plt.plot(t, kappa4, label='a=0.014')
    plt.setp(ax9, color=sns.xkcd_rgb['gold'], linewidth=2.0)
    ax10 = plt.plot(t, kappa5, label='a=0.017')
    plt.setp(ax10, color=sns.xkcd_rgb['greyish'], linewidth=2.0)
    plt.text(-2, 0.0165, '(D)', fontdict=font, fontsize=14) 
    plt.text(28, 0.005, r'$\kappa = a * e^{-0.06919t}$', fontsize=12) 
    plt.xlabel('Days since Jan. 28th',fontsize=12)
    plt.ylabel(r'$\kappa$',fontsize=12)
    plt.legend(fontsize=12)

    plt.subplot(2,3,5)
    ax51 = plt.plot(data2[0:88,0], data2[0:88,1], label=r'$\kappa$: a=0.005')
    plt.setp(ax51, color=sns.xkcd_rgb['dusty purple'], linewidth=2.0)
    ax52 = plt.plot(data2[0:92,7], data2[0:92,8], label=r'$\kappa$: a=0.008')
    plt.setp(ax52, color=sns.xkcd_rgb['medium green'], linewidth=2.0)
    ax53 = plt.plot(data2[0:92,14], data2[0:92,15], label=r'$\kappa$: a=0.01166')
    plt.setp(ax53, color=sns.xkcd_rgb['pale red'], linewidth=2.0)
    ax54 = plt.plot(data2[0:92,21], data2[0:92,22], label=r'$\kappa$: a=0.014')
    plt.setp(ax54, color=sns.xkcd_rgb['gold'], linewidth=2.0)
    ax55 = plt.plot(data2[...,28], data2[...,29], label=r'$\kappa$: a=0.017')
    plt.setp(ax55, color=sns.xkcd_rgb['greyish'], linewidth=2.0)
    plt.text(-2, 4e4, '(E)', fontdict=font, fontsize=14)
    plt.text(70, 3000, 'Infected', fontsize=18)  
    plt.xlabel('Days since Jan. 28th',fontsize=12)
    plt.ylabel('Population',fontsize=12)
    plt.legend(fontsize=12)
    axa = plt.gca()
    axa.yaxis.get_major_formatter().set_powerlimits((0, 1))

    plt.subplot(2,3,6)
    ax61 = plt.plot(data2[0:88,0], data2[0:88,4], label=r'$\kappa$: a=0.005')
    plt.setp(ax61, color=sns.xkcd_rgb['dusty purple'], linewidth=2.0)
    ax62 = plt.plot(data2[0:92,7], data2[0:92,11], label=r'$\kappa$: a=0.008')
    plt.setp(ax62, color=sns.xkcd_rgb['medium green'], linewidth=2.0)
    ax63 = plt.plot(data2[0:92,14], data2[0:92,18], label=r'$\kappa$: a=0.001166')
    plt.setp(ax63, color=sns.xkcd_rgb['pale red'], linewidth=2.0)
    ax64 = plt.plot(data2[0:92,21], data2[0:92,25], label=r'$\kappa$: a=0.014')
    plt.setp(ax64, color=sns.xkcd_rgb['gold'], linewidth=2.0)
    ax65 = plt.plot(data2[...,28], data2[...,32], label=r'$\kappa$: a=0.017')
    plt.setp(ax65, color=sns.xkcd_rgb['greyish'], linewidth=2.0)
    plt.text(-2, 4700, '(F)', fontdict=font, fontsize=14)
    plt.text(80, 200, 'Dead', fontsize=18)  
    plt.xlabel('Days since Jan. 28th',fontsize=12)
    plt.ylabel('Population',fontsize=12)
    # plt.legend(fontsize=12)
    axb = plt.gca()
    axb.yaxis.get_major_formatter().set_powerlimits((0, 1))

    plt.show()
    
if __name__ == "__main__":
    FigS3()